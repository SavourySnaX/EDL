name: CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        configs: [Release, Debug]
    steps:
    - name: Install LLVM (non windows)
      if: matrix.os != 'windows-latest'
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "11.0"
        directory: ${{ runner.temp }}/llvm
    - name: Install LLVM windows - Grab Release
      if: matrix.os == 'windows-latest' && matrix.configs == 'Release'
      run: |
        cd ${{ runner.temp }}
        curl -LO https://github.com/SavourySnaX/prebuilt-windows-dependencies/releases/download/release-11/llvm-rel.7z
        mv llvm-rel.7z llvm.7z
    - name: Install LLVM windows - Grab Debug
      if: matrix.os == 'windows-latest' && matrix.configs == 'Debug'
      run: |
        cd ${{ runner.temp }}
        curl -LO https://github.com/SavourySnaX/prebuilt-windows-dependencies/releases/download/debug_11/llvm-deb.7z
        mv llvm-deb.7z llvm.7z
    - name: Install OpenAl & GLFW windows - Grab
      if: matrix.os == 'windows-latest'
      run: |
        cd ${{ runner.temp }}
        curl -LO https://github.com/SavourySnaX/prebuilt-windows-dependencies/releases/download/glfw-1/glfw-ins.7z
        curl -LO https://github.com/SavourySnaX/prebuilt-windows-dependencies/releases/download/openal-15e05fcef882e3d50104db39d38019165c7995f9/openal-ins.7z
    - name: Install LLVM, GLFW, OpenAl Windows - Unpack
      if: matrix.os == 'windows-latest'
      run: |
        7z x ${{ runner.temp }}/glfw-ins.7z -o${{ runner.temp }}/glfw
        7z x ${{ runner.temp }}/openal-ins.7z -o${{ runner.temp }}/openal
        7z x ${{ runner.temp }}/llvm.7z -o${{ runner.temp }}/llvm
    - name: Ubuntu Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install libopenal-dev libglfw3-dev -y
    - name: MacOS Dependencies
      if: matrix.os == 'macos-latest'
      run: brew install glfw
    - name: Windows Dependencies
      if: matrix.os == 'windows-latest'
      run: choco install winflexbison
    - name: Checkout
      uses: actions/checkout@v2.0.0
    - name: Build project (mac/ubuntu)
      if: matrix.os != 'windows-latest'
      uses: nicledomaS/cmake_build_action@v1.3
      with:
        config: ${{ matrix.configs }}
        run_tests: ON
        cmake_args: ${{ env.cmake_args }}
    - name: Build project (windows)
      if: matrix.os == 'windows-latest'
      uses: nicledomaS/cmake_build_action@v1.3
      with:
        config: ${{ matrix.configs }}
        run_tests: ON
        cmake_args: -DLLVM_DIR=${{ runner.temp }}/llvm/lib/cmake/llvm/;-Dglfw3_DIR=${{ runner.temp }}/glfw/lib/cmake/glfw3/;-DOPENAL_LIBRARY=${{ runner.temp }}/openal/lib/openal32.lib;-DOPENAL_INCLUDE_DIR=${{ runner.temp }}/openal/include
    - name: Tar build
      run: tar -cvf build.tar build
    - name: Update Tar
      uses: actions/upload-artifact@v2
      with:
        path: build.tar
        name: artifact_${{ matrix.os }}_${{ matrix.configs }}
